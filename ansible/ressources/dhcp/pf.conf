# ============================================================
# INTERFACES AND NETWORKS
# ============================================================
nat_if = "em0"    # External interface
app_if = "em1"    # Main application LAN interface
db_if = "em2"     # Database LAN interface
bridge_if = "em3" # Bridge Interface

app_net = $app_if:network
db_net = $db_if:network
host_net = $nat_if:network
ext_net = $bridge_if:network

table <beaconing> persist

# ============================================================
# GLOBAL OPTIONS
# ============================================================
set block-policy return
set skip on lo
set loginterface $bridge_if

# ============================================================
# TRAFFIC NORMALIZATION
# ============================================================
match in all scrub (no-df)

# Default deny policy
block log all
block in quick from urpf-failed

# ============================================================
# ALLOW DHCP (UDP PORTS 67/68) ON BRIDGE INTERFACE
# ============================================================
pass in quick on $bridge_if proto udp from any port {67,68} to any port {67,68}
pass out quick on $bridge_if proto udp from any port {67,68} to any port {67,68}

# ============================================================
# DEFENSIVE MEASURES
# ============================================================

# only allow ssh connections from the local network if it's from the
# trusted computer, 10.0.2.15. use "block return" so that a TCP RST is
# sent to close blocked connections right away. use "quick" so that this
# rule is not overridden by the "pass" rules below.
block return in quick on $nat_if proto tcp from ! $host_net to $nat_if port ssh
block return in quick on $bridge_if proto tcp from $ext_net to any port ssh

# Match rapid connections (beaconing behavior)
pass in proto tcp to $bridge_if keep state (max-src-conn 32, max-src-conn-rate 15/5, overload <beaconing> flush global)

# ============================================================
# NETWORK ADDRESS TRANSLATION
# ============================================================
# NAT for outbound traffic
match out on $bridge_if inet from any to any nat-to ($bridge_if)
match out on $bridge_if inet6 from any to any nat-to ($bridge_if)

# ============================================================
# PORT FORWARDING
# ============================================================
# HTTP traffic redirection
pass in quick on egress proto tcp from $ext_net to $bridge_if port 3600 rdr-to 192.168.10.11 port 8080 flags S/SA keep state

# HTTP traffic redirection
pass in quick on egress proto tcp from $ext_net to $bridge_if port 3601 rdr-to 192.168.10.15 port 31328 flags S/SFRA

#Allow incoming ssh connections to the gateway
pass in on $nat_if proto tcp to $nat_if port ssh

# SSH port forwarding rules
pass in quick on $nat_if proto tcp from any to ($nat_if) port 3500 rdr-to 192.168.10.11 port 22 flags S/SA keep state
pass in quick on $nat_if proto tcp from any to ($nat_if) port 3501 rdr-to 192.168.2.12 port 22 flags S/SA keep state
pass in quick on $nat_if proto tcp from any to ($nat_if) port 3502 rdr-to 192.168.10.13 port 22 flags S/SA keep state
pass in quick on $nat_if proto tcp from any to ($nat_if) port 3503 rdr-to 192.168.10.14 port 22 flags S/SA keep state
pass in quick on $nat_if proto tcp from any to ($nat_if) port 3504 rdr-to 192.168.10.15 port 22 flags S/SA keep state

# ============================================================
# FORWARDING RULES
# ============================================================

# Allow traffic going out through the egress from any interface
pass out on $bridge_if from any to any keep state

# Allow traffic going through appnetwork router to any direction except the neighbour network
pass on $app_if from any to !$db_net keep state

# Allow traffic going through dbnetwork router to any direction except the neighbour network
pass on $db_if from any to !$app_net keep state

# Allow traffic going through appnetwork from the backend server to the db network
pass on $app_if from 192.168.1.13 to $db_net keep state

# Explicitly allow DNS traffic to the DNS server
pass proto { tcp, udp } to { 192.168.1.1, 192.168.2.1 } port 53 keep state