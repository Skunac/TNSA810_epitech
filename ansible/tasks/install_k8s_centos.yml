---
# Kubernetes setup with idempotency checks

- name: Check if kernel modules are already loaded
  shell: lsmod | grep -E "^(overlay|br_netfilter)"
  register: modules_loaded
  failed_when: false
  changed_when: false

- name: Load required kernel modules
  shell: modprobe {{ item }}
  loop:
    - overlay
    - br_netfilter
  when: item not in modules_loaded.stdout

- name: Check if containerd is installed
  shell: which containerd
  register: containerd_installed
  failed_when: false
  changed_when: false

- name: Install containerd
  shell: yum install -y containerd
  when: containerd_installed.rc != 0

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Copy config.toml to guest
  ansible.builtin.copy:
    src: "../ressources/containerd/"
    dest: "/etc/containerd/"
    mode: '0644'
    backup: yes
  register: containerd_config

- name: Check if containerd is running
  systemd:
    name: containerd
    state: started
  register: containerd_status

- name: Restart containerd only if config changed
  systemd:
    name: containerd
    state: restarted
  when: containerd_config is defined

- name: Configure modules to load at boot
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'
  register: modules_config

- name: Configure sysctl settings for Kubernetes CRI
  copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    mode: '0644'
  register: sysctl_config

- name: Apply sysctl settings only if config changed
  shell: sysctl --system
  when: sysctl_config.changed

- name: Check current swap status
  shell: swapon --show
  register: swap_status
  failed_when: false
  changed_when: false

- name: Turn off swap
  shell: swapoff --all
  when: swap_status.stdout != ""

- name: Disable swap permanently in fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  register: fstab_swap

- name: Check existing iptables rules for Kubernetes ports
  shell: iptables -C INPUT -p tcp --dport {{ item }} -j ACCEPT
  loop:
    - 6443
    - 2379
    - 2380
    - 10250
    - 10251
    - 10252
    - 10255
  register: iptables_check
  failed_when: false
  changed_when: false

- name: Allow Kubernetes ports through iptables
  shell: iptables -A INPUT -p tcp --dport {{ item.item }} -j ACCEPT
  loop: "{{ iptables_check.results }}"
  when: item.rc != 0
  register: iptables_rules

- name: Check if iptables rules file exists
  stat:
    path: /etc/sysconfig/iptables
  register: iptables_file

- name: Save iptables rules
  shell: iptables-save > /etc/sysconfig/iptables
  when: iptables_rules.changed or not iptables_file.stat.exists

- name: Check if Kubernetes repository exists
  stat:
    path: /etc/yum.repos.d/kubernetes.repo
  register: k8s_repo_exists

- name: Add Kubernetes repository
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
    enabled: yes
    gpgcheck: yes
    gpgkey: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
    exclude: kubelet kubeadm kubectl cri-tools kubernetes-cni
  when: not k8s_repo_exists.stat.exists

- name: Check if Kubernetes packages are installed
  shell: rpm -q kubelet kubeadm kubectl
  register: k8s_packages_installed
  failed_when: false
  changed_when: false

- name: Install Kubernetes packages
  shell: yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
  register: k8s_install_bulk
  when: k8s_packages_installed.rc != 0

- name: Check if kubelet service is enabled
  shell: systemctl is-enabled kubelet
  register: kubelet_enabled
  failed_when: false
  changed_when: false

- name: Enable kubelet service
  systemd:
    name: kubelet
    enabled: yes
    daemon_reload: yes
  when: kubelet_enabled.stdout != "enabled"

- name: Verify Kubernetes installation
  shell: |
    echo "Kubelet: $(kubelet --version)"
    echo "Kubeadm: $(kubeadm version --short)"
    echo "Kubectl: $(kubectl version --client --short)"
  register: k8s_versions
  changed_when: false

- name: Display Kubernetes versions  
  debug:
    var: k8s_versions.stdout_lines

- name: Create setup completion marker
  copy:
    content: |
      Kubernetes setup completed on: {{ ansible_date_time.iso8601 }}
      Host: {{ inventory_hostname }}
    dest: /etc/k8s-setup-complete.marker
    mode: '0644'