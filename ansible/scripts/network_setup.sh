#!/bin/bash
# network_setup.sh - Generates a random available IP on the local subnet

# Set output file for Ansible vars
VARS_FILE="../network_vars.yml"

# Find the primary network interface
PRIMARY_INTERFACE=$(ip -o -4 route show to default | awk '{print $5}' | head -1)
if [ -z "$PRIMARY_INTERFACE" ]; then
  echo "Could not detect primary interface, trying common names..." >&2
  # Try common interface names
  for iface in wlp1s0 wlan0 eth0 eno1 enp0s3; do
    if ip link show $iface &> /dev/null; then
      PRIMARY_INTERFACE=$iface
      break
    fi
  done
fi

if [ -z "$PRIMARY_INTERFACE" ]; then
  echo "Error: Could not find primary network interface" >&2
  exit 1
fi

echo "Using interface: $PRIMARY_INTERFACE" >&2

# Get default gateway
DEFAULT_GATEWAY=$(ip route show default | head -1 | grep -oP 'via \K[^ ]+')
echo "Default Gateway: $DEFAULT_GATEWAY" >&2

# Get IP, netmask, and network
IP_INFO=$(ip -o -4 addr show dev $PRIMARY_INTERFACE | awk '{print $4}')
IP_ADDR=$(echo $IP_INFO | cut -d/ -f1)
CIDR_PREFIX=$(echo $IP_INFO | cut -d/ -f2)

# Calculate netmask from CIDR prefix without using ipcalc
cidr_to_netmask() {
  local prefix=$1
  local mask=""
  for i in {1..4}; do
    if [ $prefix -ge 8 ]; then
      mask="$mask.255"
      prefix=$((prefix - 8))
    elif [ $prefix -gt 0 ]; then
      local val=$((256 - 2**(8-prefix)))
      mask="$mask.$val"
      prefix=0
    else
      mask="$mask.0"
    fi
  done
  echo ${mask:1}  # Remove the leading dot
}

NETMASK=$(cidr_to_netmask $CIDR_PREFIX)

echo "Local IP: $IP_ADDR" >&2
echo "CIDR: /$CIDR_PREFIX" >&2
echo "Netmask: $NETMASK" >&2

# Convert IP and netmask to network address
IFS=. read -r i1 i2 i3 i4 <<< "$IP_ADDR"
IFS=. read -r m1 m2 m3 m4 <<< "$NETMASK"
n1=$((i1 & m1))
n2=$((i2 & m2))
n3=$((i3 & m3))
n4=$((i4 & m4))
NETWORK="$n1.$n2.$n3.$n4"

echo "Network: $NETWORK" >&2

# Determine which octets to randomize based on netmask
if [ "$m2" == "0" ]; then
  # Class A - randomize octets 2, 3, and 4
  while true; do
    RAND_O2=$((RANDOM % 254 + 1))
    RAND_O3=$((RANDOM % 254 + 1))
    RAND_O4=$((RANDOM % 254 + 1))
    RANDOM_IP="$n1.$RAND_O2.$RAND_O3.$RAND_O4"
    
    # Skip if it's the same as our IP
    if [ "$RANDOM_IP" == "$IP_ADDR" ]; then
      continue
    fi
    
    # Check if the IP is in use
    ping -c 1 -W 1 $RANDOM_IP > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      # IP is available
      break
    fi
    echo "IP $RANDOM_IP is in use, trying another..." >&2
  done
elif [ "$m3" == "0" ]; then
  # Class B - randomize octets 3 and 4
  while true; do
    RAND_O3=$((RANDOM % 254 + 1))
    RAND_O4=$((RANDOM % 254 + 1))
    RANDOM_IP="$n1.$n2.$RAND_O3.$RAND_O4"
    
    # Skip if it's the same as our IP
    if [ "$RANDOM_IP" == "$IP_ADDR" ]; then
      continue
    fi
    
    # Check if the IP is in use
    ping -c 1 -W 1 $RANDOM_IP > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      # IP is available
      break
    fi
    echo "IP $RANDOM_IP is in use, trying another..." >&2
  done
else
  # Class C or others - randomize just octet 4
  while true; do
    RAND_O4=$((RANDOM % 254 + 1))
    RANDOM_IP="$n1.$n2.$n3.$RAND_O4"
    
    # Skip if it's the same as our IP
    if [ "$RANDOM_IP" == "$IP_ADDR" ]; then
      continue
    fi
    
    # Check if the IP is in use
    ping -c 1 -W 1 $RANDOM_IP > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      # IP is available
      break
    fi
    echo "IP $RANDOM_IP is in use, trying another..." >&2
  done
fi

echo "Generated available IP: $RANDOM_IP" >&2

# Write to Ansible vars file
cat > $VARS_FILE << EOF
---
# Network configuration variables - generated by network_setup.sh
host_ip: "$IP_ADDR"
host_network: "$NETWORK"
host_netmask: "$NETMASK"
host_cidr: "$CIDR_PREFIX"
default_gateway: "$DEFAULT_GATEWAY"
target_ip: "$RANDOM_IP"
target_interface: "em3"
host_interface: "$PRIMARY_INTERFACE"
EOF

echo "Wrote network configuration to $VARS_FILE" >&2
echo $RANDOM_IP